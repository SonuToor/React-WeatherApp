{"ast":null,"code":"import _slicedToArray from \"/Users/sonutoor/codingsmaan/React-WeatherApp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sonutoor/codingsmaan/React-WeatherApp/src/components/weatherdisplay/WeatherDisplay.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport IndividualDay from \"./IndividualDay\";\nimport { WeatherContext } from \"../../context/WeatherContext\";\nimport WeatherTitle from \"./WeatherTitle\";\nimport { createArrayOfDates } from \"../../utils\";\nlet StyledContainer = styled.div`\n  display: flex;\n  width: 80%;\n  margin-left: 10%;\n  justify-content: center;\n  @media (max-width: 575px) {\n    flex-direction: column;\n    width: 100%;\n  }\n`;\n\nconst WeatherDisplay = () => {\n  const _useContext = useContext(WeatherContext),\n        _useContext2 = _slicedToArray(_useContext, 1),\n        data = _useContext2[0];\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        city = _useState2[0],\n        setCity = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        forecast = _useState4[0],\n        setForecast = _useState4[1];\n\n  let dates = createArrayOfDates(new Date());\n  useEffect(() => {\n    if (weather === null) {\n      return;\n    } else {\n      setCity(data.city);\n      setForecast(data.list);\n    }\n  }, [data]);\n  return React.createElement(React.Fragment, null, React.createElement(WeatherTitle, {\n    city: city,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(StyledContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n};\n\nexport default WeatherDisplay;","map":{"version":3,"sources":["/Users/sonutoor/codingsmaan/React-WeatherApp/src/components/weatherdisplay/WeatherDisplay.js"],"names":["React","useContext","useEffect","useState","styled","IndividualDay","WeatherContext","WeatherTitle","createArrayOfDates","StyledContainer","div","WeatherDisplay","data","city","setCity","forecast","setForecast","dates","Date","weather","list"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,kBAAT,QAAmC,aAAnC;AAGA,IAAIC,eAAe,GAAGL,MAAM,CAACM,GAAI;;;;;;;;;CAAjC;;AAWA,MAAMC,cAAc,GAAG,MAAM;AAAA,sBACZV,UAAU,CAACK,cAAD,CADE;AAAA;AAAA,QACpBM,IADoB;;AAAA,oBAEHT,QAAQ,CAAC,IAAD,CAFL;AAAA;AAAA,QAEpBU,IAFoB;AAAA,QAEdC,OAFc;;AAAA,qBAGKX,QAAQ,CAAC,IAAD,CAHb;AAAA;AAAA,QAGpBY,QAHoB;AAAA,QAGVC,WAHU;;AAK3B,MAAIC,KAAK,GAAGT,kBAAkB,CAAC,IAAIU,IAAJ,EAAD,CAA9B;AAGAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACD,KAFD,MAGK;AACHL,MAAAA,OAAO,CAACF,IAAI,CAACC,IAAN,CAAP;AACAG,MAAAA,WAAW,CAACJ,IAAI,CAACQ,IAAN,CAAX;AACD;AACF,GARQ,EAQN,CAACR,IAAD,CARM,CAAT;AAUA,SACE,0CACA,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAEC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CADF;AAcD,CAhCD;;AAkCA,eAAeF,cAAf","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport IndividualDay from \"./IndividualDay\";\nimport { WeatherContext } from \"../../context/WeatherContext\";\nimport WeatherTitle from \"./WeatherTitle\";\nimport { createArrayOfDates } from \"../../utils\";\n\n\nlet StyledContainer = styled.div`\n  display: flex;\n  width: 80%;\n  margin-left: 10%;\n  justify-content: center;\n  @media (max-width: 575px) {\n    flex-direction: column;\n    width: 100%;\n  }\n`\n\nconst WeatherDisplay = () => {\n  const [data] = useContext(WeatherContext);\n  const [city, setCity] = useState(null)\n  const [forecast, setForecast] = useState(null)\n\n  let dates = createArrayOfDates(new Date())\n\n\n  useEffect(() => {\n    if (weather === null) {\n      return\n    }\n    else {\n      setCity(data.city)\n      setForecast(data.list)\n    }\n  }, [data])\n\n  return (\n    <>\n    <WeatherTitle city={city}/>\n    <StyledContainer>\n        {/* {forecast === null ?\n        null\n        :\n        dates.map((day, index) => \n          <IndividualDay key={day} date={day} forecast={forecast[index * 8]}/>\n        )} */}\n\n    </StyledContainer>\n    </>\n  )\n}\n\nexport default WeatherDisplay;"]},"metadata":{},"sourceType":"module"}