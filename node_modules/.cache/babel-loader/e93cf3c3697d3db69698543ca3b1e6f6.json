{"ast":null,"code":"import _slicedToArray from \"/Users/sonutoor/codingsmaan/React-WeatherApp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sonutoor/codingsmaan/React-WeatherApp/src/components/weatherdisplay/WeatherDisplay.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport IndividualDay from \"./IndividualDay\";\nimport { WeatherContext } from \"../../context/WeatherContext\";\nimport WeatherTitle from \"./WeatherTitle\";\nimport { createArrayOfDates } from \"../../utils\";\nlet StyledContainer = styled.div`\n  display: flex;\n  width: 80%;\n  margin-left: 10%;\n  justify-content: center;\n  @media (max-width: 575px) {\n    flex-direction: column;\n    width: 100%;\n  }\n`;\n\nconst WeatherDisplay = () => {\n  const _useContext = useContext(WeatherContext),\n        _useContext2 = _slicedToArray(_useContext, 1),\n        weather = _useContext2[0];\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        city = _useState2[0],\n        setCity = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        forecast = _useState4[0],\n        setForecast = _useState4[1];\n\n  let dates = createArrayOfDates(new Date());\n\n  const iterate = array => {\n    for (let i = 0; i < array.length; i++) {\n      // utc date and local date\n      console.log(array[i][\"dt_txt\"], array[i][\"dt\"]);\n      console.log(new Date(array[i][\"dt_txt\"]), new Date());\n    }\n  };\n\n  useEffect(() => {\n    if (weather === null) {\n      return;\n    } else if (weather.cod !== \"200\") {\n      return;\n    } else {\n      setCity(weather.city.name);\n      setForecast(weather.list); // go through each one\n\n      iterate(weather.list);\n    }\n  }, [weather]); // I WANT THE WEATHER ENTRY TO COMPLETE FOR THE CURRENT DAY \n  // DO YOU WANT TO DISPLAY THE CURRENT WEATHER IN THE UTC TIME (WHAT THE API GIVES YOU) OR DISPLAY THE CURRENT WEATHER IN LOCAL TIME \n  // A SOLUTION TO SEPARATE BY UTC DAY\n  // this separates these days based off utc time (which is what the api goes by)\n  // to separate each day, you have to go the weather object\n  // every time the days position in the string of dt_txt changes the days changed and \n  // iterate through the dates array and isolate the day in there \n  // date.foreach(day => \n  // let dayString = day.slice(#, #)\n  // iterate over weatherentries\n  // weather.foreach\n  // let weatherEntryDayString.slice(#, #)\n  // if (dayString === weatherEntryDayString) \n  // \n  //)\n\n  return React.createElement(React.Fragment, null, React.createElement(WeatherTitle, {\n    city: city,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(StyledContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, forecast === null ? null : dates.map((day, index) => React.createElement(IndividualDay, {\n    key: day,\n    date: day,\n    forecast: forecast[index * 8],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }))));\n};\n\nexport default WeatherDisplay;","map":{"version":3,"sources":["/Users/sonutoor/codingsmaan/React-WeatherApp/src/components/weatherdisplay/WeatherDisplay.js"],"names":["React","useContext","useEffect","useState","styled","IndividualDay","WeatherContext","WeatherTitle","createArrayOfDates","StyledContainer","div","WeatherDisplay","weather","city","setCity","forecast","setForecast","dates","Date","iterate","array","i","length","console","log","cod","name","list","map","day","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,kBAAT,QAAmC,aAAnC;AAGA,IAAIC,eAAe,GAAGL,MAAM,CAACM,GAAI;;;;;;;;;CAAjC;;AAWA,MAAMC,cAAc,GAAG,MAAM;AAAA,sBACTV,UAAU,CAACK,cAAD,CADD;AAAA;AAAA,QACpBM,OADoB;;AAAA,oBAEHT,QAAQ,CAAC,IAAD,CAFL;AAAA;AAAA,QAEpBU,IAFoB;AAAA,QAEdC,OAFc;;AAAA,qBAGKX,QAAQ,CAAC,IAAD,CAHb;AAAA;AAAA,QAGpBY,QAHoB;AAAA,QAGVC,WAHU;;AAK3B,MAAIC,KAAK,GAAGT,kBAAkB,CAAC,IAAIU,IAAJ,EAAD,CAA9B;;AAEA,QAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGD,KAAK,CAACE,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACC,CAAD,CAAL,CAAS,QAAT,CAAZ,EAAgCD,KAAK,CAACC,CAAD,CAAL,CAAS,IAAT,CAAhC;AAEAE,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAIN,IAAJ,CAASE,KAAK,CAACC,CAAD,CAAL,CAAS,QAAT,CAAT,CAAZ,EAA0C,IAAIH,IAAJ,EAA1C;AACD;AACF,GAPD;;AAQAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACD,KAFD,MAGK,IAAIA,OAAO,CAACa,GAAR,KAAgB,KAApB,EAA2B;AAC9B;AACD,KAFI,MAGA;AACHX,MAAAA,OAAO,CAACF,OAAO,CAACC,IAAR,CAAaa,IAAd,CAAP;AACAV,MAAAA,WAAW,CAACJ,OAAO,CAACe,IAAT,CAAX,CAFG,CAGH;;AACAR,MAAAA,OAAO,CAACP,OAAO,CAACe,IAAT,CAAP;AAED;AACF,GAdQ,EAcN,CAACf,OAAD,CAdM,CAAT,CAf2B,CA+B3B;AAEA;AACI;AACA;AACA;AACA;AAGJ;AACA;AACM;AACA;AACA;AACE;AACA;AACM;AAEd;;AACA,SACE,0CACA,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAEC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,QAAQ,KAAK,IAAb,GACD,IADC,GAGDE,KAAK,CAACW,GAAN,CAAU,CAACC,GAAD,EAAMC,KAAN,KACR,oBAAC,aAAD;AAAe,IAAA,GAAG,EAAED,GAApB;AAAyB,IAAA,IAAI,EAAEA,GAA/B;AAAoC,IAAA,QAAQ,EAAEd,QAAQ,CAACe,KAAK,GAAG,CAAT,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJJ,CAFA,CADF;AAcD,CAhED;;AAkEA,eAAenB,cAAf","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport IndividualDay from \"./IndividualDay\";\nimport { WeatherContext } from \"../../context/WeatherContext\";\nimport WeatherTitle from \"./WeatherTitle\";\nimport { createArrayOfDates } from \"../../utils\";\n\n\nlet StyledContainer = styled.div`\n  display: flex;\n  width: 80%;\n  margin-left: 10%;\n  justify-content: center;\n  @media (max-width: 575px) {\n    flex-direction: column;\n    width: 100%;\n  }\n`\n\nconst WeatherDisplay = () => {\n  const [weather] = useContext(WeatherContext);\n  const [city, setCity] = useState(null)\n  const [forecast, setForecast] = useState(null)\n\n  let dates = createArrayOfDates(new Date())\n\n  const iterate = (array) => {\n    for (let i=0; i < array.length; i++) {\n      // utc date and local date\n      console.log(array[i][\"dt_txt\"], array[i][\"dt\"])\n\n      console.log(new Date(array[i][\"dt_txt\"]), new Date())\n    }\n  }\n  useEffect(() => {\n    if (weather === null) {\n      return\n    }\n    else if (weather.cod !== \"200\") {\n      return\n    }\n    else {\n      setCity(weather.city.name)\n      setForecast(weather.list)\n      // go through each one\n      iterate(weather.list)\n\n    }\n  }, [weather])\n\n  // I WANT THE WEATHER ENTRY TO COMPLETE FOR THE CURRENT DAY \n\n  // DO YOU WANT TO DISPLAY THE CURRENT WEATHER IN THE UTC TIME (WHAT THE API GIVES YOU) OR DISPLAY THE CURRENT WEATHER IN LOCAL TIME \n      // A SOLUTION TO SEPARATE BY UTC DAY\n      // this separates these days based off utc time (which is what the api goes by)\n      // to separate each day, you have to go the weather object\n      // every time the days position in the string of dt_txt changes the days changed and \n\n\n  // iterate through the dates array and isolate the day in there \n  // date.foreach(day => \n        // let dayString = day.slice(#, #)\n        // iterate over weatherentries\n        // weather.foreach\n          // let weatherEntryDayString.slice(#, #)\n          // if (dayString === weatherEntryDayString) \n                // \n          \n  //)\n  return (\n    <>\n    <WeatherTitle city={city}/>\n    <StyledContainer>\n        {forecast === null ?\n        null\n        :\n        dates.map((day, index) => \n          <IndividualDay key={day} date={day} forecast={forecast[index * 8]}/>\n        )}\n\n    </StyledContainer>\n    </>\n  )\n}\n\nexport default WeatherDisplay;"]},"metadata":{},"sourceType":"module"}